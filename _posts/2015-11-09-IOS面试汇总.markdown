---
layout: post
title:  "IOS-面试汇总"
date:   2015-11-08 10:23:32
categories: IOS
---

##1. abcdefasdefwefwefw中adc出现的次数
hashmap

##2. 10个员工中快速找出 年纪最大的员工
`堆排序`

堆排序 (Heap 80忱) 就是利用堆(假设利用大顶堆)进行排序的方法。它的基本 思想是, 将待排序的序列构造成一个大顶堆。此时,整个序列的最大值就是堆顶的根 结点。将官移走(其实就是将其与堆数组的末尾元素交换,此时末尾元素就是最大 值) .然后将剩余的 n-1 个序列重新构造成一个堆,这样就刽寻到 n 个元素中的次小 值。如此反复执行, 便能得到一个有序序列了。

##3. 2万个员工中取年纪最大的前10个
* 快速排序
* 堆排序
 
##4. map和NSdic的底层实现
map `红黑树`
`红黑树`本质上就是一棵二叉查找树

##5. http协议中 判断用户头像是否有更新的方法有那些
If-None-Match和`ETag`一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(`ETag`的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和`Etag`

##6. http中文件断点下载的实现机制
实际上断点续传的实现非常简单，只要在请求中加一个Range字段就可以了。 
假如一个文件有1000个字节，那么其范围就是0-999，则： 
Range: bytes=500-      表示读取该文件的500-999字节，共500字节。 
Range: bytes=500-599   表示读取该文件的500-599字节，共100字节。 
Range还有其它几种写法，但上面这两种是最常用的，对于断点续传也足矣了。如果HTTP请求中包含Range字段，那么服务器会返回206（Partial Content），同时HTTP头中也会有一个相应的Content-Range字段，类似下面的格式：
Content-Range: bytes 500-999/1000 
Content-Range字段说明服务器返回了文件的某个范围及文件的总长度。这时Content-Length字段就不是整个文件的大小了，而是对应文件这个范围的字节数，这一点一定要注意。

##7. 怎么与服务器商定可变参数的协议
参数前带个标示

##8. iOS用户响应者链剖析
[响应链]简单来说就是:一级一级的找到响应的视图,如果没有就传给UIWindow实例和UIApplication实例,要是他们也处理不了,就丢弃这次事件...

[响应链]: http://www.cnblogs.com/mcj-coding/p/3569908.html

##9. instrument中检测图片透明度
coreAnimation

##10. IOS混编C++ C++中如果有数组越界了 怎么快速定位
lldb

##11. IOS中野指针怎么快速定位
IOS提供了一个环境变量设置来帮忙定位错误位置的信息描述：NSZombieEnabled ，就是当设置NSZombieEnabled环境变量后，一个对象销毁时会被转化为_NSZombie，设置NSZombieEnabled后，当你向一个已经释放的对象发送消息，这个对象就不会向之前那样Crash或者产生一个难以理解的行为，而是放出一个错误消息，然后以一种可预测的可以产生debug断点的方式消失， 因此我们就可以找到具体或者大概是哪个对象被错误的释放了。

##12. IOS中app切到后台后,怎么实现的继续导航
[application beginBackgroundTaskWithExpirationHandler:]

##13. IOS 推送机制
Apple Push Notification Service
1. 首先是应用程序注册消息推送。
2. IOS跟APNS Server要deviceToken。应用程序接受deviceToken。
3. 应用程序将deviceToken发送给PUSH服务端程序。
4. 服务端程序向APNS服务发送消息。
5. APNS服务将消息发送给iPhone应用程序。
 
##14. 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析
方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n * le)（le表示单词的平准长度）。然后是找出出现最频繁的前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n * lg10)。所以总的时间复杂度，是O(n * le)与O(n * lg10)中较大的哪一个。

##15. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？
方案1：这题用trie树比较合适，hash_map也应该能行。
![image](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/d62a6059252dd42a745cc2c2033b5bb5c9eab806.jpg)

##16. 如把字符串“abcdef”前面的2个字符'a'和'b'移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)
解法一：暴力移位法
解法二：三步反转法(异或)

1. 首先将原字符串分为两个部分，即X:abc，Y:def；
2. 将X反转，X->X^T，即得：abc->cba；将Y反转，Y->Y^T，即得：def->fed。
3. 反转上述步骤得到的结果字符串X^TY^T，即反转字符串cbafed的两部分（cba和fed）给予反转，cbafed得到defabc，形式化表示为(X^TY^T)^T=YX，这就实现了整个反转。
 
##17. 如何最快地判断字符串B中所有字母是否都在字符串A里？
解法一：逐个比较<br>
解法二：可先对这两个字符串的字母进行排序，然后再同时对两个字串依次轮询<br>
解法三：素数<br>

1. 按照从小到大的顺序，用26个素数分别与字符'A'到'Z'一一对应。
2. 遍历长字符串，求得每个字符对应素数的乘积。
3. 遍历短字符串，判断乘积能否被短字符串中的字符对应的素数整除。
4. 输出结果。

##18. 计数排序

计数排序的思想是对每一个输入元素x，确定出小于x的元素个数，有了这一信息，就可以把x直接放在它在最终输出数组的位置上，例如，如果有17个元素小于x，则x就是属于第18个输出位置。当几个元素相同是，方案要略作修改。

##19. 输入字符串"123"，输出整数123

解法一：<br>

1. 当我们扫描到字符串的第一个字符'1'时，由于我们知道这是第一位，所以得到数字1。
2. 当扫描到第二个数字'2'时，而之前我们知道前面有一个1，所以便在后面加上一个数字2，那前面的1相当于10，因此得到数字：1 * 10 + 2 = 12。
3. 继续扫描到字符'3'，'3'的前面已经有了12，由于前面的12相当于120，加上后面扫描到的3，最终得到的数是：12 * 10 + 3 = 123。
 
##20. 判断一个字串是否是回文？
解法一：<br>

* 同时从字符串头尾开始向中间扫描字串，如果所有字符都一样，那么这个字串就是一个回文。采用这种方法的话，我们只需要维护头部和尾部两个扫描指针即可。<br>
解法二：<br>
可以先从中间开始、然后向两边扩展查看字符是否相等。

1. 判断一条单向链表是不是“回文”
分析：对于单链表结构，可以用两个指针从两端或者中间遍历并判断对应字符是否相等。但这里的关键就是如何朝两个方向遍历。由于单链表是单向的，所以要向两个方向遍历的话，可以采取经典的快慢指针的方法，即先位到链表的中间位置，再将链表的后半逆置，最后用两个指针同时从链表头部和中间开始同时遍历并比较即可。
2. 判断一个栈是不是“回文”
分析：对于栈的话，只需要将字符串全部压入栈，然后依次将各字符出栈，这样得到的就是原字符串的逆置串，分别和原字符串各个字符比较，就可以判断了。

##21. 给定一个字符串，求它的最长回文子串的长度

解法一：<br>
最容易想到的办法是枚举所有的子串，分别判断其是否为回文

##22. 输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则输出由字符a、b、c 所能排列出来的所有字符串

abc、acb、bac、bca、cab 和 cba。
解法一、递归实现

	1.固定a，求后面bc的排列：abc，acb，求好后，a和b交换，得到bac
	2.固定b，求后面ac的排列：bac，bca，求好后，c放到第一位置，得到cba
	3.固定c，求后面ba的排列：cba，cab。
		
##23. 输入n个整数，输出其中最小的k个

解法一: 快速排序<br>
解法二:用选择或交换排序<br>

1. 遍历n个数，把最先遍历到的k个数存入到大小为k的数组中，假设它们即是最小的k个数；
2. 对这k个数，利用选择或交换排序找到这k个元素中的最大值kmax（找最大值需要遍历这k个数，时间复杂度为O（k））；
3. 继续遍历剩余n-k个数。假设每一次遍历到的新的元素的值为x，把x与kmax比较：如果x < kmax ，用x替换kmax，并回到第二步重新找出k个元素的数组中最大元素kmax‘；如果x >= kmax，则继续遍历不更新数组。

##24. 输入一个数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字。要求时间复杂度是O(N)。如果有多对数字的和等于输入的数字，输出任意一对即可。例如输入数组1、2、4、7、11、15和数字15。由于4+11=15，因此输出4和11

解法一：<br>
原始序列： - 1、 2、 4、 7、11、15
用输入数字15减一下各个数，得到对应的序列为： - 14、13、11、8、4、 0
第一个数组以一指针i 从数组最左端开始向右扫描，第二个数组以一指针j 从数组最右端开始向左扫描，如果第一个数组出现了和第二个数组一样的数，即a[i]=a[j]，就找出这俩个数来了。 如上，i，j最终在第一个，和第二个序列中找到了相同的数4和11，所以符合条件的两个数，即为4+11=15。 怎么样，两端同时查找，时间复杂度瞬间缩短到了O(N)，但却同时需要O(N)的空间存储第二个数组。
解法二：hash表

##25. 一个台阶总共有n 级，如果一次可以跳1 级，也可以跳2 级。求总共有多少总跳法，并分析算法的时间复杂度

解法一：斐波那契 递归

##26. 给定一个有序的数组，查找某个数是否在数组中

解法一：二分查找

##27. 数组中有一个数字出现的次数超过了数组长度的一半，找出这个数字

解法：hash表

##28. 关联式容器

因为set/map/multiset/multimap都是基于RB-tree之上，所以有自动排序功能，而hash_set/hash_map/hash_multiset/hash_multimap都是基于hashtable之上，所以不含有自动排序功能，至于加个前缀multi_无非就是允许键值重复而已

##29. 海量数据分而治之

换言之，先映射，而后统计，最后排序（堆/归并排序）

##30. 什么是Bit-map，假设我们要对0-7内的5个元素(4,7,2,5,3)排序

所谓的Bit-map就是用一个bit位来标记某个元素对应的Value， 而Key即是该元素。由于采用了Bit为单位来存储数据，因此在存储空间方面，可以大大节省

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/bit-map.gif)

##31. 倒排索引

倒排索引是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射，常被应用于搜索引擎和关键字查询的问题中

	T0 = "it is what it is"  
	T1 = "what is it"  
	T2 = "it is a banana"  
	反向文件索引
	"a":      {2}
	"banana": {2}
	"is":     {0, 1, 2}
	"it":     {0, 1, 2}
	"what":   {0, 1}

##32. 简单阐述TCP连接的三次握手

SYN:请求同步/同步序列号 ACK:应答同步/确认字段
第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
第二次握手：服务器收到syn包，必须确认客户的syn（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。

##33. 线性表是零个或多个具有相同类型的数据元素的有限序列

线性表的两大结构顺序存储结构和链式存储 结构

##34. 栈( stack )是限定仅在表尾进行插入和删除操作的线性表

队列 ( queue ) 是只允许在一端进行插入操作,而在另 -端进行删除操 作的线性表

##35. 字符串的KMP匹配算法

[KMP匹配算法](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)

##36. 二叉树

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic.jpg)

##37. 二叉树遍历方法

1. 前序遍历
2. 中序遍历
3. 后序遍历
4. 层序遍历
 
##38. Huffman tree(赫夫曼树、霍夫曼树、哈夫曼树、最优二叉树是压缩和解压算法的基础)

[赫夫曼算法](http://blog.csdn.net/flyfish1986/article/details/47192277)描述:

1. 根据给定的n个权值{Wl,响,...,Wn}构成n棵二叉树的集合F={Tl,T2,...几}, 其中每棵二叉树 Ti 中只有一个带权为 Wi根结点,其左右子树均为空 。
2. 在 F 中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树,且 置新的二叉树的根结点的权值为其左右子树上根结点的权值之和。
3. 在F中删除这两棵树,同时将新得到的二叉树加入F中。4. 重复 2 和 3 步骤,直到 F 只含一棵树为止。这棵树便是赫夫曼树。
 
##39. 我们把构造连通网的最小代价生成树 称为最小生成树

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic2.jpg)

##40. 排序算法

1. 冒泡排序
2. 简单选择排序：简单选择排序法 (Simp坠 Selection Sort) 就是通过 n- i 次关键字间的比较,从n-j+1个记录中选出关键字最小的记录,并和第 i (1<i<;n) 个记录交换之。
3. 直接插入排序的基本操作是将 一个记录插入到已经排 好序的有序表中,从而得到一个新的、记录数增 1 的有序表。
4. 希尔排序：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。
5. 堆排序：堆排序 就是利用堆(假设利用大顶堆)进行排序的方法。它的基本 思想是, 将待排序的序列构造成一个大顶堆。此时,整个序列的最大值就是堆顶的根 结点。将它移走(其实就是将其与堆数组的末尾元素交换,此时末尾元素就是最大 值) .然后将剩余的 n-1 个序列重新构造成一个堆,这样就刽寻到 n 个元素中的次小 值。如此反复执行, 便能得到一个有序序列了
6. 归并排序：<br>
 ![img1] 
7. 快速排序：快速排序 (Quick Sort) 的基本思想是:通过一趟排序将待排记录分割成独立的 两部分,其中一部分记录的关键字均比另 一部分记录的关键字小,则可分别对这两部 分记录继续进行排序,以达到整个序列有序的目的
 
[img1]: https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic3.jpg

##41. 查找算法

1. 折半查找（二分查找）
2. 插值查找：<br>
 ![findImg]
3. 线性索引查找
  * 稠密索引
  * 分块索引
  * 倒排索引（百度关键词）
4. 平衡二叉树(AVL树)平衡二叉树 是一种二叉排序树,其中每一个节点的左子树和右子树的高度差至多等于1
5. 散列表查找（hash表）

[findImg]: https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic4.jpg

##42. IOS 消息机制
iOS 提供了一种 "同步的" 消息通知机制，观察者只要向消息中心注册， 即可接受其他对象发送来的消息，消息发送者和消息接受者两者可以互相一无所知，完全解耦。

##43. Block

[Block全面分析](http://my.oschina.net/leejan97/blog/268536)

[Objc中Block的原理、实现及注意事项](http://www.jianshu.com/p/c45da9ef84eb)

##44. KVC和KVO

KVC(Key-Value-Coding)内部的实现：一个对象在调用setValue的时候:

（1）首先根据方法名找到运行方法的时候所需要的环 境参数。

（2）他会从自己isa指针结合环境参数，找到具体的方法实现的接口。

（3）再直接查找得来的具体的方法实现。KVO（Key-Value- Observing）：当观察者为一个对象的属性进行了注册，被观察对象的isa指针被修改的时候，isa指针就会指向一个中间类，而不是真实的类。所以 isa指针其实不需要指向实例对象真实的类。所以我们的程序最好不要依赖于isa指针。在调用类的方法的时候，最好要明确对象实例的类名

##45. 浅复制和深复制

浅层复制：只复制指向对象的指针，而不复制引用对象本身。
深层复制：复制引用对象本身

##46. 类别和类扩展的区别

category和extensions的不同在于 后者可以添加属性。另外后者添加的方法是必须要实现的。

##47. 层和UIView的区别是什么

两者最大的区别是,图层不会直接渲染到屏幕上，UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它。它本身完全是由CoreAnimation来实现的。它真正的绘图部分，是由一个CALayer类来管理。UIView本身更像是一个CALayer的管理器。一个UIView上可以有n个CALayer，每个layer显示一种东西，增强UIView的展现能力。

##48. 进程与线程

进程（process）是一块包含了某些资源的内存区域。操作系统利用进程把它的工作划分为一些功能单元。
进程中所包含的一个或多个执行单元称为线程（thread）。进程还拥有一个私有的虚拟地址空间，该空间仅能被它所包含的线程访问。

##49. masksToBounds属性的作用

决定子layer是否被当前layer的边界剪切。默认是NO

##50. GET和POST的区别

1. GET请求的数据会附在URL之后，POST把提交的数据则放置在是HTTP包的包体中
2. "GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据
3. POST的安全性要比GET的安全性高

##51. iOS使用ZipArchive压缩文件

##52. 解决优先级翻转问题有优先级天花板(priority ceiling)和优先级继承(priority inheritance)两种办法

优先级天花板是当任务申请某资源时， 把该任务的优先级提升到可访问这个资源的所有任务中的最高优先级， 这个优先级称为该资源的优先级天花板。这种方法简单易行， 不必进行复杂的判断， 不管任务是否阻塞了高优先级任务的运行， 只要任务访问共享资源都会提升任务的优先级。
优先级继承是当任务A 申请共享资源S 时， 如果S正在被任务C 使用，通过比较任务C 与自身的优先级，如发现任务C 的优先级小于自身的优先级， 则将任务C的优先级提升到自身的优先级， 任务C 释放资源S 后，再恢复任务C 的原优先级。这种方法只在占有资源的低优先级任务阻塞了高优先级任务时才动态的改变任务的优先级，如果过程较复杂， 则需要进行判断。

##53. NSRunLoop的使用场景

Run Loop的使用场合：

1. 使用port或是自定义的input source来和其他线程进行通信
2. 在线程（非主线程）中使用timer
3. 使用 performSelector...系列（如performSelectorOnThread, ...）
4. 使用线程执行周期性工作
在NSRunLoop中每一个消息就被打包在input source或者是timer source中了，当需要处理的时候就直接调用其中包含的相应对象的处理函数了

##54. QuartzCore、CoreFoundation、CoreGraphics

QuartzCore：iOS编程给用户视觉反馈其实都是通过QuartzCore框架来进行的，说白了，所有用户最终看到的显示界面都是图层合成的结果，而图层即是QuartzCore中的CALayer

CoreFoundation：Core Foundation框架 (CoreFoundation.framework) 是一组C语言接口，它们为iOS应用程序提供基本数据管理和服务功能。下面列举该框架支持进行管理的数据以及可提供的服务：

	▪	群体数据类型 (数组、集合等)
	▪	程序包
	▪	字符串管理
	▪	日期和时间管理
	▪	原始数据块管理
	▪	偏好管理
	▪	URL及数据流操作
	▪	线程和RunLoop
	▪	端口和soket通讯

##55. iOS之线程间通信

1. `performSelector`
2. `gcd`
  
dispatch_async(dispatch_get_global_queue(0, 0), ^{
        // 处理耗时操作的代码块...
        
        //通知主线程刷新
        dispatch_async(dispatch_get_main_queue(), ^{
            //回调或者说是通知主线程刷新，
        });
        
    });

##56. category 和 extension区别

1. 形式上来看，extension是匿名的category。
2. extension里声明的方法需要在mainimplementation中实现，category不强制要求。
3. extension可以添加属性（变量），category不可以。

##57. viewController生命周期

ViewController的生命周期中各方法执行流程如下：
loadView和viewDidLoad的区别就是，loadView时view还没有生成，viewDidLoad时，view已经生成了，loadView只会被调用一次，而viewDidLoad可能会被调用多次（View可能会被多次加载），当view被添加到其他view中之前，会调用viewWillAppear，之后会调用viewDidAppear。当view从其他view中移除之前，调用viewWillDisAppear，移除之后会调用viewDidDisappear。当view不再使用时，受到内存警告时，ViewController会将view释放并将其指向为nil。

init—>loadView—>viewDidLoad—>viewWillApper—>viewDidApper—>viewWillDisapper—>viewDidDisapper—>viewWillUnload->viewDidUnload—>dealloc

##58. id与nil

id和void *并非完全一样。在上面的代码中，id是指向struct objc_object的一个指针，这个意思基本上是说，id是一个指向任何一个继承了Object(或者NSObject)类的对象。需要注意的是id是一个指针，所以你在使用id的时候不需要加星号。比如id foo=nil定义了一个nil指针，这个指针指向NSObject的一个任意子类。而id *foo=nil则定义了一个指针，这个指针指向另一个指针，被指向的这个指针指向NSObject的一个子类。

nil和C语言的NULL相同，在objc/objc.h中定义。nil表示一个Objctive-C对象，这个对象的指针指向空(没有东西就是空)。

##59. ARC是在编译期管理内存，垃圾回收是运行期

##60. ViewController 的loadView、viewDidLoad、viewDidUnload分别是什么时候调用的，在自定义ViewCointroller时在这几个函数中应该做什么工作？

由init、loadView、viewDidLoad、viewDidUnload、dealloc的关系说起

init方法
在init方法中实例化必要的对象（遵从LazyLoad思想） init方法中初始化ViewController本身

loadView方法
当view需要被展示而它却是nil时，viewController会调用该方法。不要直接调用该方法。 如果手工维护views，必须重载重写该方法 如果使用IB维护views，必须不能重载重写该方法
loadView和IB构建view 你在控制器中实现了loadView方法，那么你可能会在应用运行的某个时候被内存管理控制调用。 如果设备内存不足的时候， view 控制器会收到didReceiveMemoryWarning的消息。 默认的实现是检查当前控制器的view是否在使用。 如果它的view不在当前正在使用的view hierarchy里面，且你的控制器实现了loadView方法，那么这个view将被release, loadView方法将被再次调用来创建一个新的view。

viewDidLoad方法
viewDidLoad 此方法只有当view从nib文件初始化的时候才被调用。 重载重写该方法以进一步定制view 在iPhone OS 3.0及之后的版本中，还应该重载重写viewDidUnload来释放对view的任何索引 viewDidLoad后调用数据Model

viewDidUnload方法
当系统内存吃紧的时候会调用该方法（注：viewController没有被dealloc） 内存吃紧时，在iPhone OS 3.0之前didReceiveMemoryWarning是释放无用内存的唯一方式，但是OS 3.0及以后viewDidUnload方法是更好的方式 在该方法中将所有IBOutlet（无论是property还是实例变量）置为nil（系统release view时已经将其release掉了）
在该方法中释放其他与view有关的对象、其他在运行时创建（但非系统必须）的对象、在viewDidLoad中被创建的对象、缓存数据等 release对象后，将对象置为nil（IBOutlet只需要将其置为nil，系统release view时已经将其release掉了）
一般认为viewDidUnload是viewDidLoad的镜像，因为当view被重新请求时，viewDidLoad还会重新被执行
viewDidUnload中被release的对象必须是很容易被重新创建的对象（比如在viewDidLoad或其他方法中创建的对象），不要release用户数据或其他很难被重新创建的对象
dealloc方法
viewDidUnload和dealloc方法没有关联，dealloc还是继续做它该做的事情

##61. loadView与viewDidLoad不同

一. loadView

永远不要主动调用这个函数。view controller会在view的property被请求并且当前view值为nil时调用这个函数。如果你手动创建view，你应该重载这个函数,且不要在重载的时候调用[super loadview]。如果你用IB创建view并初始化view controller，那就意味着你使用initWithNibName:bundle:方法，这时，你不应该重载loadView函数。
这个方法系统的默认实现是这样：

1. 寻找有关可用的nib文件的信息，根据这个信息来加载nib文件       //所以，nib的加载过程是在loadview中完成的哦。
2. 如果没有有关nib文件的信息，默认创建一个空白的UIView对象，然后把对象成赋值给viewcontroller的主view。
所以，如果你决定重载这个函数时，你也应该完成这些步骤：
把子类的view赋给view属性(property)（你create的view必须是唯一的实例，并且不被其他任何controller共享），而且你重载的这个函数不应该调用super，这个也是为了保持主view与controller的单一映射关系。

二. viewDidLoad

这个函数在controller加载了相关的views后被调用，而不论这些views存储在nib文件里还是在loadView函数中生成。
这个函数的作用主要是让你可以进一步的初始化你的views。viewDidLoad通常负责的是view及其子view被加载进内存之后的数据初始化的工作，即视图的数据部分的初始化。在iOS 3.0以及更高版本中，你应该重载viewDidUnload函数来释放任何对view的引用或者它里面的内容（子view等等）。
其多数情况下是做nib文件的后续工作。
viewDidUnload
这个函数是viewDidLoad的对立函数。在程序内存欠缺时，这个函数被controller调用，来释放它的view以及view相关的对象。由于controller通常保存着view以及相关object的引用，所以你必须使用这个函数来放弃这些对象的所有权以便内存回收。但不要释放那些难以重建的数据。
通常controller会保存nib文件建立的views的引用，但是也可能会保存着loadView函数创建的对象的引用。最完美的方法是使用合成器方法：
1 self.myCertainView = nil; 
这样合成器会release这个view，如果你没有使用property，那么你得自己显式释放这个view。
结论
所以流程应该是这样：
loadView来加载view（无论nib文件或自定义的views）到内存 ——>viewDidLoad函数进一步初始化这些view （通常是侧重于数据data的初始化）——>内存不足时，调用viewDidUnload函数释放views
—->当需要使用view时又回到第一步
如此循环

需要厘清两个概念,创建一个类和实例化一个类.在XCode中创建一个类和实例化一个类很容易区分,但是在IB(Interface Builder)中有时候就会迷糊.其实也很好区分,孤零零地创建了一个nib文件,没有和其他可被实例化的类有直接或间接关系的时候,这个类或这些类(一个nib文件也可能包含多个类)是没有机会被实例化的,所以这种情况只是通过ib创建了一个类,而没有实例化.真正的实例化还需要通过在Xcode用代码来读取这个nib文件.知道这两这的区别后这些方法也就容易辨认多了
viewDidLoad其实没什么可混淆的,无论通过什么途径加载(Xcode或者IB,这里的加载属于实例化)完view后肯定会执行这个方法.
loadView需要分两种情况.当你通过Xcode实例化一个类的时候就需要自己在controller中实现这个方法.而在IB中实例化就不需要实现它.
initWithNibName这个方法是在controller的类在IB中创建,但是通过Xcode实例化controller的时候用的.
initWithCoder是一个类在IB中创建但在xocdde中被实例化时被调用的.比如,通过IB创建一个controller的nib文件,然后在xcode中通过initWithNibName来实例化这个controller,那么这个controller的initWithCoder会被调用.
awakeFromNib 
当.nib文件被加载的时候，会发送一个awakeFromNib的消息到.nib文件中的每个对象，每个对象都可以定义自己的awakeFromNib函数来响应这个消息，执行一些必要的操作。也就是说通过nib文件创建view对象时执行awakeFromNib 
viewDidLoad 
当view对象被加载到内存后就会执行viewDidLoad，所以不管通过nib文件还是代码的方式创建对象都会执行viewDidLoad 。

##62. 栈区和堆区区别

栈区（stack）―   由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 

堆区（heap） ―   一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。
程序的局部变量存在于（栈）中，全局变量存在于（静态区 ）中，动态申请数据存在于（ 堆）中
这样说比较准确,所谓的栈其实是由寄存器ebp和esp指向的一片内存空间(ebp指向栈底,esp指向栈顶),原则上是由高地址向低地址生长的一片空间,会保存一些临时的数据,比如一个函数中的临时变量以及返回地址,数据的出入是先进后出,后进先出.
全局变量实际上是存在一个(一般来说正常的编译器)可读可写的内存空间,这个空间是在你写程序编译好的空间地址(由编译器决定),是固定的.
堆是由操作系统管理的一片空间,事先是没有在进程空间里分配的(比如你在没有分配堆的时候就访问堆空间会报一个内存访问错误),一般是由程序动态的分配出来,一旦分配了以后,一般需要程序去释放自己的堆空间.
这只是简单的描述一下概念,如果要深入讲这三个空间的结构还是有些复杂度的。

##63. Object-C有私有方法吗？私有变量呢？

没有私有方法，但有私有变量。

##64. 多线程安全

@synchronized

NSlock

##65. GCD的使用

如果不使用GCD，做下载操作需要3步开始下载 –> 下载中 –> 下载完成
且需要传递数据参数，代码变得更加散落，代码的可读性大大降低。
使用GCD后，代码变清楚了，虽然是异步的代码，但是它们被GCD合理的整合在一起，逻辑非常清晰。

例子：

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic5.jpg)

合并执行：

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/pasted_graphic6.jpg)

##66. 工厂模式的优点

工厂模式就是专门负责将大量有共同接口的类实例化,而且不必事先知道每次是要实例化哪一个类的模式。它定义一个用于创建对象的接口，由子类决定实例化哪一个类

1. 在编码时不能预见需要创建哪一种类的实例。 
2. 一个类使用它的子类来创建对象。 
3. 开发人员不希望创建了哪个类的实例以及如何创建实例的信息暴露给外部程序。

##67. 抽象类和接口有什么区别？（瞬联）

1. abstract class 在 Java 语言中表示的是一种继承关系，一个类只能使用一次继承关系。但是，一个类却可以实现多个interface。

2. 在abstract class 中可以有自己的数据成员，也可以有非abstarct的成员方法，而在interface中，只能够有静态的不能被修改的数据成员（也就是必须是static final的，不过在 interface中一般不定义数据成员），所有的成员方法都是abstract的。

3. abstract class和interface所反映出的设计理念不同。其实abstract class表示的是"is-a"关系，interface表示的是"like-a"关系。

4. 实现抽象类和接口的类必须实现其中的所有方法。抽象类中可以有非抽象方法。接口中则不能有实现方法。

5. 接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值。

6. 抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。

7. 接口中的方法默认都是 public,abstract 类型的。

##68. TCP/IP协议

传输控制协议/因特网互联协议，又名网络通讯协议，由网络层的IP协议和传输层的TCP协议组成

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/tcp网络传输.jpg)

##69. BAD_ACCESS在什么情况下出现？

访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。 死循环

##70. 如何把一个包含自定义对象的数组序列化到磁盘？

NSCoding协议

##71. iOS 的签名机制大概是怎样的？

公钥私钥

##72. +load 和 +initialize 的区别是什么

load 类加载的时候调用，initialize 实例对象创建的调用时候

##73. NSOperation 相比于 GCD 有哪些优势？

便捷，更加容易

##74. UIView 和 CALayer 之间的关系？

UIView真正的绘图部分，是由一个叫CALayer来管理。UIView本身，更像是一个CALayer的管理器，访问它的跟绘图和跟坐标有关的属性，例如frame，bounds等等，实际上内部都是在访问它所包含的CALayer的相关属性。

##75. frame 和 bounds 的区别是什么？

frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）

bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）


#76. 一个 App 会处于哪些状态？

详细：<http://blog.csdn.net/totogo2010/article/details/8048652>
应用程序的状态

Not running  未运行  程序没启动

Inactive            未激活        程序在前台运行，不过没有接收到事件。在没有事件处理情况下程序通常停留在这个状态

Active              激活           程序在前台运行而且接收到了事件。这也是前台的一个正常的模式

Backgroud     		后台           程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会。时间到之后会进入挂起状态(Suspended)。有的程序经过特殊的请求后可以长期处于Backgroud状态

Suspended    		挂起           程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。

##77. runtime如何实现weak变量的自动置nil？

runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。

##78. 什么是 Runloop？

<http://www.cocoachina.com/ios/20150601/11970.html>

Runloop是事件接收和分发机制的一个实现。
    Runloop提供了一种异步执行代码的机制，不能并行执行任务。
    在主队列中，Main RunLoop直接配合任务的执行，负责处理UI事件、定时器以及其他内核相关事件。

RunLoop的主要目的：
    保证程序执行的线程不会被系统终止。    

什么时候使用Runloop ?
当需要和该线程进行交互的时候才会使用Runloop.
每一个线程都有其对应的RunLoop，但是默认非主线程的RunLoop是没有运行的，需要为RunLoop添加至少一个事件源，然后去run它。一般情况下我们是没有必要去启用线程的RunLoop的，除非你在一个单独的线程中需要长久的检测某个事件。
    主线程默认有Runloop。当自己启动一个线程，如果只是用于处理单一的事件，则该线程在执行完之后就退出了。所以当我们需要让该线程监听某项事务时，就得让线程一直不退出，runloop就是这么一个循环，没有事件的时候，一直卡着，有事件来临了，执行其对应的函数。
    
    Runloop，正如其名所示，是线程进入和被线程用来响应事件以及调用事件处理函数的地方。需要在代码中使用控制语句实现run loop的循环，也就是说，需要代码提供while 或者 for循环来驱动run loop。
    在这个循环中，使用一个Runloop对象[NSRunloop currentRunloop]执行接收消息，调用对应的处理函数。
    Runloop接收两种源事件:input sources和timer sources。
    input sources 传递异步事件，通常是来自其他线程和不同的程序中的消息；
    timer sources(定时器) 传递同步事件（重复执行或者在特定时间上触发）。
    除了处理input sources，Runloop 也会产生一些关于本身行为的notificaiton。注册成为Runloop的observer，可以接收到这些notification，做一些额外的处理。（使用CoreFoundation来成为runloop的observer）。
Runloop工作的特点：
		
1. 当有事件发生时，Runloop会根据具体的事件类型通知应用程序作出响应；
2. 当没有事件发生时，Runloop会进入休眠状态，从而达到省电的目的；
3. 当事件再次发生时，Runloop会被重新唤醒，处理事件。
提示：一般在开发中很少会主动创建Runloop，而通常会把事件添加到Runloop中。

##79. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?

一般observer的机制模式，观察者应该都是assign的，出现问题，一般都是观察者释放掉，被观察者向一个以释放的观察者发通知就出现了野指针，个人认为！！ 
实现自释放的方法可以总结为以下三种方式

1. 动态属性的自释放
2. @property 的自释放
3. swizzling dealloc的自释放

##80. Toll-Free Bridging 是什么？什么情况下会使用？

在 Core Foundation 和 Foundation 之间交换使用数据类型的技术就叫 Toll-Free Bridging.
NSString和CFStringRef之间转换

##81. 为什么 UIScrollView 的滚动会导致 NSTimer 失效？

原因是拖动时，主线程的RunLoop切换到UITrackingRunLoopMode模式，而定时器在NSDefaultRunLoopMode模式。
将定时器添加到标记为common modes的模式下

##82. 使用 Block 时需要注意哪些问题

1. block 在实现时就会对它引用到的它所在方法中定义的栈变量进行一次只读拷贝，然后在 block 块内使用该只读拷贝。
2. 非内联（inline） block 不能直接访问 self，只能通过将 self 当作参数传递到 block 中才能使用，并且此时的 self 只能通过 setter 或 getter 方法访问其属性，不能使用句点式方法。但内联 block 不受此限制。

##83. 如何播放 GIF 图片，有什么优化方案么？

连续动画，UIWebView实现
[webView loadData:gif MIMEType:@"image/gif" textEncodingName:nil baseURL:nil];


##84. ARC通过什么方式帮助开发者管理内存？

ARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。
在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化

##85. lldb（gdb）常用的调试命令？

	·	breakpoint 设置断点定位到某一个函数
	·	n 断点指针下一步
	·	po打印对象
	
##86. KVO的实现

![img](https://github.com/hong4cong/hong4cong.github.io/raw/master/images/2015.11.09/687474703a2f2f6936322e74696e797069632e636f6d2f7379353775722e6a7067.png)